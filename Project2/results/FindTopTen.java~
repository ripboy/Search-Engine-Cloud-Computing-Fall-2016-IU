import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

/*  This class reads the output file generated by the HadoopPageRank program
*   It then finds the source URLs with Top 10 page ranks.
*/

class SourceURL implements Comparable < SourceURL > {
 int sourceURL;
 double pageRank;

 public SourceURL(int sourceURL, double pageRank) {
  this.sourceURL = sourceURL;
  this.pageRank = pageRank;
 }
 @Override
 public int compareTo(SourceURL x) {
  return new Double(pageRank).compareTo(x.pageRank);
 }
 @Override
 public String toString() {
  return String.valueOf(pageRank);
 }
}


public class FindTopTen {

 public static void main(String[] args) {

  // The name of the file to open.
  String fileName = args[0];
  String fileNameop = args[0] + "-top10";
  StringBuilder output= new StringBuilder();
  //Number of URLs
  int count = Integer.parseInt(args[1]);
  // This will reference one line at a time
  String line = null;

  try {
   // FileReader reads text files in the default encoding.
   FileReader fileReader = new FileReader(fileName);
   // Always wrap FileReader in BufferedReader.
   BufferedReader bufferedReader = new BufferedReader(fileReader);
   //Reading the sourceURLs ann their pageranks from the generated output file
   SourceURL sourceURLs[] = new SourceURL[count];
   for (int i = 0;
    (line = bufferedReader.readLine()) != null; i++) {
    sourceURLs[i] = new SourceURL(Integer.parseInt(line.split("\t")[0]), Double.parseDouble(line.split("\t")[1]));
   }
   //Sorting the array based on pagerank   
   Arrays.sort(sourceURLs);
   //Storing the top 10 values of pagerank
   output.append("Rank\tSource URL Number\tIt's PageRank");
   int rank = 1;
   for (int i = count - 1; i > count - 11; i--) {
    output.append(rank + "\t\t" + sourceURLs[i].sourceURL + "\t\t" + sourceURLs[i].pageRank + "\n");
    rank++;
   }
   //writing the top 10 values of pagerank
   FileWriter fileWriter = new FileWriter(fileNameop);
   // Always wrap FileWriter in BufferedWriter.
   BufferedWriter bufferedWriter =
    new BufferedWriter(fileWriter);
   // Note that write() does not automatically
   // append a newline character.
   bufferedWriter.write(output.toString());
   // Always close files.
   bufferedWriter.close();
   // Always close files.
   bufferedReader.close();
  } catch (FileNotFoundException ex) {
   System.out.println("Unable to open file '" + fileName + "'");
  } catch (IOException ex) {
   System.out.println("Error reading file '" + fileName + "'");
  }
 }
}
